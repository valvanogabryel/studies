(()=>{"use strict";const e=class{constructor(e,s,t,n){this.name=e,this.maxCapacity=s,this.currentCharge=t,this.shield=n}currentPercentage(){return 100*this.currentCharge/this.maxCapacity}},s=class{constructor(e){this.spaceship=e}turnOn(){let e=this.checkCurrentCharge(),s=this.checkShield();Promise.all([e,s]).then((e=>this.normalizeShield(e[1]))).then((e=>{this.spaceship.shield=e,console.log(`(${this.spaceship.name}) Partida autorizada: Escudo (${this.spaceship.shield}) - Carga(${this.spaceship.currentCharge}GJ)`)})).catch((e=>console.log(`(${this.spaceship.name}) Partida não autorizada: ${e}`)))}checkCurrentCharge(){return new Promise(((e,s)=>{let t=Math.round(this.spaceship.currentPercentage());t<30?s("Carga muito baixa!"):e(t)}))}checkShield(){return new Promise(((e,s)=>{let t=2*this.spaceship.shield;t<100?s("Escudo muito baixo!"):e(t)}))}normalizeShield(e){return new Promise(((s,t)=>{let n=.7*e;n>120?t("Escudo sobrecarregado!"):s(n)}))}},t=new e("Sophia",10,5,70),n=new e("Amsterdã",14,10,40),o=new e("Estrela-Anã",20,4,80),a=new e("Falcon-9",20,18,90),r=new s(t),i=new s(n),c=new s(o),h=new s(a);setTimeout((()=>{r.turnOn()}),1e3),setTimeout((()=>{i.turnOn()}),2e3),setTimeout((()=>{c.turnOn()}),3e3),setTimeout((()=>{h.turnOn()}),4e3),setTimeout((()=>{console.log("Carregando informação das naves..."),console.log("------------------------------------")}),5e3),setTimeout((()=>{console.log(t),console.log(n),console.log(o),console.log(a)}),7e3),console.log("Checando naves...")})();